REMOTE PROVISIONER :


ssh-keygen -t rsa 
----

provider "google" {
  credentials = "./my-sa.json"
  project     = "graphite-shell-387915"
  region      = "europe-west4"
  zone        = "europe-west4-a"
}

resource "google_compute_instance" "instance" {
  name                      = "server1"
  machine_type              = "e2-micro"
  allow_stopping_for_update = true
  depends_on                = [google_compute_network.vpc_network, google_compute_subnetwork.test-subnetwork]
  metadata = {
    ssh-keys = "${var.user}:${file(var.publickeypath)}"
  }
  boot_disk {
    initialize_params {
      image = "debian-11-bullseye-v20230509"
    }
  }

  # To keep the setup simple you can set the network_interface to default
  # For Advance network setup refer to Point-7 : Setup Network and Firewall for virtual machine
  network_interface {
    network    = "vpc-network1"
    subnetwork = "test-subnetwork"
    access_config {
      // Ephemeral public IP
    }
  }

provisioner "remote-exec" {
    connection {
      host        = google_compute_instance.instance.network_interface[0].access_config[0].nat_ip
      type        = "ssh"
      user        = var.user
      timeout     = "500s"
      private_key = file(var.privatekeypath)
    }
    inline = [
      "sudo mkdir test",
      "sudo touch file1",
      "sudo apt-get install nginx -y",
      "sudo systemctl start nginx"
    ]
  }

}

resource "google_compute_network" "vpc_network" {
  name                    = "vpc-network1"
  auto_create_subnetworks = false
}

resource "google_compute_subnetwork" "test-subnetwork" {
  name          = "test-subnetwork"
  ip_cidr_range = "192.168.10.0/24"
  region        = "europe-west4"
  network       = google_compute_network.vpc_network.id
}

resource "google_compute_firewall" "default" {
  name          = "test-firewall"
  network       = google_compute_network.vpc_network.name
  source_ranges = ["0.0.0.0/0"]
  allow {
    protocol = "icmp"
  }

  dynamic "allow" {
    for_each = var.port
    iterator = firewall
    content {
      ports    = firewall.value[*]
      protocol = "tcp"
    }
  }

}


variable "port" {
  type    = list(any)
  default = ["22", "8201", "443", "80", "9500"]
}

variable "user" {
    type = string
    default= "admin"
}
variable "privatekeypath" {
    type = string
    default = "~/.ssh/id_rsa"
}
variable "publickeypath" {
    type = string
    default = "~/.ssh/id_rsa.pub"
}


===============================================================